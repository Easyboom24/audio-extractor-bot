#from config import TOKEN
import ffmpeg
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from datetime import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import streamlit as st
from asyncio import new_event_loop, set_event_loop
set_event_loop(new_event_loop())

# Configure logging
logging.basicConfig(level=logging.INFO)
# Initialize bot and dispatcher
bot = Bot(token=st.secrets["TOKEN"])

dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

class MachineStates(StatesGroup):
    IN_PROCESS = State()
    VIDEO = State()
    AUDIO = State()
    ALL = State()

kb = [
    [types.KeyboardButton(text='üìπ –í–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞')],
    [types.KeyboardButton(text="üîà –ê—É–¥–∏–æ –±–µ–∑ –≤–∏–¥–µ–æ")],
    [types.KeyboardButton(text="üîàüìπ –ó–≤—É–∫ –∏ –≤–∏–¥–µ–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏")],
    [types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")],
]

@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–Ø —É–º–µ—é –æ—Ç–¥–µ–ª—è—Ç—å –∞—É–¥–∏–æ –æ—Ç –≤–∏–¥–µ–æ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç!\n–ü—Ä–∏—Å—Ç—É–ø–∏–º!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∏–¥–µ–æ —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 50–º–±")
    
@dp.message_handler(state=None, content_types=['video'])
async def download_video(message: types.Message, state: FSMContext):
    try:
        file_id = message.video.file_id
        file = await bot.get_file(file_id)
        datestamp = str(datetime.now()).replace('.','-').replace(' ', '-').replace(':', '-')
        await bot.download_file(file.file_path, f"videos/video-{datestamp}.mp4")
        async with state.proxy() as data:
            data['datestamp'] = datestamp
        await MachineStates.IN_PROCESS.set()
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=keyboard)
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")
        await state.finish()

@dp.message_handler(Text(equals='üìπ –í–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞', ignore_case=True), state=MachineStates.IN_PROCESS)
async def set_state_video(message: types.Message, state: FSMContext):
    await MachineStates.VIDEO.set()
    msg = await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...", reply_markup=types.ReplyKeyboardRemove())
    await get_video(message,state, msg)

@dp.message_handler(Text(equals='üîà –ê—É–¥–∏–æ –±–µ–∑ –≤–∏–¥–µ–æ', ignore_case=True), state=MachineStates.IN_PROCESS)
async def set_state_video(message: types.Message, state: FSMContext):
    await MachineStates.AUDIO.set()
    msg = await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...", reply_markup=types.ReplyKeyboardRemove())
    await get_audio(message,state,msg)

@dp.message_handler(Text(equals='üîàüìπ –ó–≤—É–∫ –∏ –≤–∏–¥–µ–æ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏', ignore_case=True), state=MachineStates.IN_PROCESS)
async def set_state_video(message: types.Message, state: FSMContext):
    await MachineStates.ALL.set()
    msg = await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...", reply_markup=types.ReplyKeyboardRemove())
    await get_all(message,state,msg)

@dp.message_handler(Text(equals='‚ùå –û—Ç–º–µ–Ω–∞', ignore_case=True), state=MachineStates.IN_PROCESS)
async def cancel(message: types.Message, state: FSMContext):
    await message.answer(text="–î–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ —Å–Ω–æ–≤–∞",reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

async def get_video(message: types.Message, state: FSMContext, msg:  types.Message):
    async with state.proxy() as data:
        input = ffmpeg.input(f"videos/video-{data['datestamp']}.mp4")
        videoFile = input.video
        ffmpeg.output(videoFile,f"outputVideo/{data['datestamp']}.mp4").run()
        await message.reply_video(open(f"outputVideo/{data['datestamp']}.mp4", "rb"))
        await msg.delete()
    await state.finish()

async def get_audio(message: types.Message, state: FSMContext, msg:  types.Message):
    async with state.proxy() as data:
        input = ffmpeg.input(f"videos/video-{data['datestamp']}.mp4")
        audioFile = input.audio
        ffmpeg.output(audioFile,f"outputAudio/{data['datestamp']}.mp3").run()
        await message.reply_audio(open(f"outputAudio/{data['datestamp']}.mp3", "rb"))
        await msg.delete()
    await state.finish()

async def get_all(message: types.Message, state: FSMContext, msg:  types.Message):
    async with state.proxy() as data:
        input = ffmpeg.input(f"videos/video-{data['datestamp']}.mp4")
        audioFile = input.audio
        videoFile = input.video
        ffmpeg.output(videoFile,f"outputVideo/{data['datestamp']}.mp4").run()
        ffmpeg.output(audioFile,f"outputAudio/{data['datestamp']}.mp3").run()
        await message.reply_video(open(f"outputVideo/{data['datestamp']}.mp4", "rb"))
        await message.reply_audio(open(f"outputAudio/{data['datestamp']}.mp3", "rb"))
        await msg.delete()
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
